name: Refresh Firebase Database

on:
  schedule:
    - cron: '*/5 * * * *'  # Check every 5 minutes
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync even if content unchanged'
        required: false
        default: 'false'
        type: boolean
  repository_dispatch:
    types: [content-updated]

jobs:
  refresh-database:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install firebase
        
      - name: Debug Environment
        run: |
          echo "🔍 Environment Debug:"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Current directory: $(pwd)"
          echo "API Key present: ${{ secrets.FIREBASE_API_KEY != '' }}"
          
      - name: Fetch Content from External Repository
        run: |
          echo "📥 Fetching content from external repository..."
          curl -o content.json https://raw.githubusercontent.com/prabhat76/russian-translator-content/master/data/content.json
          echo "✅ Content fetched"
          echo "📄 Content preview:"
          head -20 content.json
          
      - name: Refresh Firebase Database
        run: |
          cat > refresh-db.js << 'EOF'
          const { initializeApp } = require('firebase/app');
          const { getDatabase, ref, set, remove, get } = require('firebase/database');
          const fs = require('fs');
          const crypto = require('crypto');
          
          console.log('🚀 Script started at:', new Date().toISOString());
          
          const firebaseConfig = {
            apiKey: "${{ secrets.FIREBASE_API_KEY }}",
            authDomain: "russiantranslator-aa708.firebaseapp.com",
            databaseURL: "https://russiantranslator-aa708-default-rtdb.asia-southeast1.firebasedatabase.app",
            projectId: "russiantranslator-aa708"
          };
          
          console.log('🔧 Firebase config:', {
            authDomain: firebaseConfig.authDomain,
            databaseURL: firebaseConfig.databaseURL,
            projectId: firebaseConfig.projectId,
            hasApiKey: !!firebaseConfig.apiKey
          });
          
          const app = initializeApp(firebaseConfig);
          const rtdb = getDatabase(app);
          console.log('🔥 Firebase initialized successfully');
          
          async function refreshDatabase() {
            try {
              console.log('🔄 Starting database refresh at:', new Date().toISOString());
              
              // Check if content file exists
              console.log('📁 Checking content file...');
              if (!fs.existsSync('content.json')) throw new Error('content.json not found');
              console.log('✅ Content file exists');
              
              // Read content from external repository
              console.log('📖 Reading content from external repository...');
              const contentData = JSON.parse(fs.readFileSync('content.json', 'utf8'));
              const enContent = contentData.en || {};
              const ruContent = contentData.ru || {};
              
              // Generate content hash for comparison
              const contentHash = crypto.createHash('md5').update(JSON.stringify({en: enContent, ru: ruContent})).digest('hex');
              console.log('📋 New content hash:', contentHash);
              
              console.log('📊 Content loaded:');
              console.log(`  EN sections: ${Object.keys(enContent).join(', ')}`);
              console.log(`  RU sections: ${Object.keys(ruContent).join(', ')}`);
              
              // Check current database content
              console.log('🔍 Checking current database content...');
              const currentData = await get(ref(rtdb, 'content'));
              console.log('Current data exists:', currentData.exists());
              
              const forceSync = '${{ github.event.inputs.force_sync }}' === 'true';
              console.log('🔧 Force sync:', forceSync);
              
              let shouldUpdate = true;
              if (currentData.exists() && !forceSync) {
                const current = currentData.val();
                console.log('Current languages:', Object.keys(current));
                console.log('Current hash:', current.contentHash || 'none');
                
                if (current.contentHash === contentHash) {
                  console.log('⏭️ Content unchanged, skipping update');
                  shouldUpdate = false;
                } else {
                  console.log('🔄 Content changed, proceeding with update');
                }
              } else if (forceSync) {
                console.log('💪 Force sync enabled, updating regardless of changes');
              }
              
              if (!shouldUpdate) {
                console.log('✅ Sync completed - no changes needed');
                return;
              }
              
              // Clear existing content first
              console.log('🗑️ Clearing existing content...');
              await remove(ref(rtdb, 'content'));
              console.log('✅ Content cleared');
              
              // Upload fresh content
              const newContent = {
                en: enContent,
                ru: ruContent,
                lastUpdated: new Date().toISOString(),
                version: Date.now(),
                source: 'github-actions',
                contentHash: contentHash,
                syncTrigger: process.env.GITHUB_EVENT_NAME || 'manual'
              };
              
              console.log('📤 Uploading fresh content...');
              console.log('Upload payload keys:', Object.keys(newContent));
              
              await set(ref(rtdb, 'content'), newContent);
              console.log('✅ Content uploaded');
              
              // Verify upload
              console.log('🔍 Verifying upload...');
              const verifyData = await get(ref(rtdb, 'content'));
              if (verifyData.exists()) {
                const verified = verifyData.val();
                console.log('✅ Verification successful!');
                console.log('Verified languages:', Object.keys(verified));
                console.log('Last updated:', verified.lastUpdated);
                console.log('Version:', verified.version);
              } else {
                throw new Error('Verification failed - no data found after upload');
              }
              
              console.log('🎉 Database refresh completed successfully!');
              
            } catch (error) {
              console.error('❌ Database refresh failed:', error.message);
              console.error('Error details:', error);
              if (error.stack) console.error('Stack trace:', error.stack);
              process.exit(1);
            }
          }
          
          refreshDatabase();
          EOF
          
          echo "📝 Generated script content:"
          head -20 refresh-db.js
          echo "..."
          
          echo "🚀 Running refresh script..."
          node refresh-db.js
        env:
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}